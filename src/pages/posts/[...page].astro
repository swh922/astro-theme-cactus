---
import type { CollectionEntry } from "astro:content";
import Pagination from "@/components/Paginator.astro";
import PostPreview from "@/components/blog/PostPreview.astro";
import { getAllPosts, getUniqueTags, groupPostsByYear } from "@/data/post";
import PageLayout from "@/layouts/Base.astro";
import { collectionDateSort } from "@/utils/date";
import type { GetStaticPaths, Page } from "astro";
import { Icon } from "astro-icon/components";

export const getStaticPaths = (async ({ paginate }) => {
	const MAX_POSTS_PER_PAGE = 10;
	const MAX_TAGS = 7;
	const allPosts = await getAllPosts();
	const uniqueTags = getUniqueTags(allPosts).slice(0, MAX_TAGS);
	return paginate(allPosts.sort(collectionDateSort), {
		pageSize: MAX_POSTS_PER_PAGE,
		props: { uniqueTags },
	});
}) satisfies GetStaticPaths;

interface Props {
	page: Page<CollectionEntry<"post">>;
	uniqueTags: string[];
}

const { page, uniqueTags } = Astro.props;

// 元数据已翻译
const meta = {
	description: "阅读我的文章合集以及我感兴趣的事物",
	title: "文章", // 或者 "博客"
};

// 分页文本已翻译
const paginationProps = {
	...(page.url.prev && {
		prevUrl: {
			text: "← 上一页",
			url: page.url.prev,
		},
	}),
	...(page.url.next && {
		nextUrl: {
			text: "下一页 →",
			url: page.url.next,
		},
	}),
};

const groupedByYear = groupPostsByYear(page.data);
const descYearKeys = Object.keys(groupedByYear).sort((a, b) => +b - +a);
---

<PageLayout meta={meta}>
	<div class="mb-6 flex items-center gap-3">
        {/* H1 已翻译 */}
		<h1 class="title">文章</h1>
		<a class="text-accent" href="/rss.xml" target="_blank">
            {/* SR 文本已翻译 */}
			<span class="sr-only">RSS 订阅源</span>
			<Icon aria-hidden="true" class="h-6 w-6" focusable="false" name="mdi:rss" />
		</a>
	</div>
	<div class="grid sm:grid-cols-[3fr_1fr] sm:gap-x-8 sm:gap-y-16">
		<div>
			{
				descYearKeys.map((yearKey) => (
					<section aria-labelledby={`year-${yearKey}`}>
						<h2 id={`year-${yearKey}`} class="title text-lg">
                            {/* SR 文本已翻译 */}
							<span class="sr-only">{yearKey} 年的文章</span>
							{yearKey}
						</h2>
						<ul class="mt-5 mb-16 space-y-6 text-start">
							{groupedByYear[yearKey]?.map((p) => (
								<li class="grid gap-2 sm:grid-cols-[auto_1fr] sm:[&_q]:col-start-2">
                                    {/* PostPreview 内部文本需在其组件或源文件中翻译 */}
									<PostPreview post={p} />
								</li>
							))}
						</ul>
					</section>
				))
			}
            {/* 分页组件使用已翻译的 props */}
			<Pagination {...paginationProps} />
		</div>
		{
			!!uniqueTags.length && (
				<aside>
					<h2 class="title mb-4 flex items-center gap-2 text-lg">
                        {/* 侧边栏 H2 已翻译 */}
						标签
						<svg
							aria-hidden="true"
							class="h-6 w-6"
							fill="none"
							stroke="currentColor"
							stroke-linecap="round"
							stroke-linejoin="round"
							stroke-width="1.5"
							viewBox="0 0 24 24"
							xmlns="http://www.w3.org/2000/svg"
						>
							{/* SVG paths */}
						</svg>
					</h2>
					<ul class="flex flex-wrap gap-2">
						{uniqueTags.map((tag) => (
							<li>
								<a class="cactus-link flex items-center justify-center" href={`/tags/${tag}/`}>
									<span aria-hidden="true">#</span>
                                    {/* SR 文本已翻译 */}
									<span class="sr-only">查看所有带 “{tag}” 标签的文章</span>
									{tag} {/* 标签名本身可能需要翻译，但这通常在数据层面处理 */}
								</a>
							</li>
						))}
					</ul>
					<span class="mt-4 block sm:text-end">
						<a class="hover:text-link" href="/tags/">
                            {/* 链接文本已翻译 */}
							查看全部 <span aria-hidden="true">→</span>
                            {/* SR 文本已翻译 */}
							<span class="sr-only">博客标签</span>
						</a>
					</span>
				</aside>
			)
		}
	</div>
</PageLayout>
